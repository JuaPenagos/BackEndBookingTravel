// <auto-generated />
using System;
using BackEndBookingTravel.Infrastructure.SQL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BackEndBookingTravel.Infrastructure.SQL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240801154709_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmergencyContactName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmergencyPhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRoom");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.BookingCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdBooking")
                        .HasColumnType("int");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdBooking");

                    b.HasIndex("IdCustomer");

                    b.ToTable("BookingCustomer");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdGender")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdDocumentType");

                    b.HasIndex("IdGender");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DocumentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CC",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4085),
                            Description = "Cedula de Ciudadania",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4088)
                        },
                        new
                        {
                            Id = 2,
                            Code = "TP",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4090),
                            Description = "Pasaporte",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4091)
                        },
                        new
                        {
                            Id = 3,
                            Code = "PA",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4092),
                            Description = "Tarjeta de Identidad",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4093)
                        });
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "F",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4488),
                            Description = "Femenino",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4489)
                        },
                        new
                        {
                            Id = 2,
                            Code = "M",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4494),
                            Description = "Masculino",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4494)
                        },
                        new
                        {
                            Id = 3,
                            Code = "O",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4496),
                            Description = "Otro",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4496)
                        });
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Hotel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreateUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Hotels", (string)null);
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.HotelRoom", b =>
                {
                    b.Property<int>("IdHotel")
                        .HasColumnType("int");

                    b.Property<int>("IdRoom")
                        .HasColumnType("int");

                    b.HasKey("IdHotel", "IdRoom");

                    b.HasIndex("IdRoom");

                    b.ToTable("HotelRoom");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BasePrice")
                        .HasColumnType("float");

                    b.Property<int>("CreateUser")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdRoomType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdRoomType");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Parejas",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4551),
                            Description = "Habitacion doble",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4552)
                        },
                        new
                        {
                            Id = 2,
                            Code = "Individual",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4554),
                            Description = "Habitacion Sencilla",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4555)
                        },
                        new
                        {
                            Id = 3,
                            Code = "Matrimonial",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4556),
                            Description = "Suite",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4557)
                        },
                        new
                        {
                            Id = 4,
                            Code = "Familiar",
                            CreationDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4558),
                            Description = "Habitacion multiple",
                            UpdateDate = new DateTime(2024, 8, 1, 15, 47, 7, 732, DateTimeKind.Utc).AddTicks(4559)
                        });
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Booking", b =>
                {
                    b.HasOne("BackEndBookingTravel.Domain.Entities.Room", "Room")
                        .WithMany("Bookings")
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.BookingCustomer", b =>
                {
                    b.HasOne("BackEndBookingTravel.Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("IdBooking")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndBookingTravel.Domain.Entities.Customer", null)
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Customer", b =>
                {
                    b.HasOne("BackEndBookingTravel.Domain.Entities.DocumentType", "DocumentType")
                        .WithMany("Customers")
                        .HasForeignKey("IdDocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndBookingTravel.Domain.Entities.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("IdGender")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.HotelRoom", b =>
                {
                    b.HasOne("BackEndBookingTravel.Domain.Entities.Hotel", null)
                        .WithMany()
                        .HasForeignKey("IdHotel")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BackEndBookingTravel.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("IdRoom")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Room", b =>
                {
                    b.HasOne("BackEndBookingTravel.Domain.Entities.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("IdRoomType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.DocumentType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.Room", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("BackEndBookingTravel.Domain.Entities.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
